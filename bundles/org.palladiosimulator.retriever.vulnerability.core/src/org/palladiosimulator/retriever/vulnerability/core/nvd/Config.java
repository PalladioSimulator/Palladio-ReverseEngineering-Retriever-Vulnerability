
package org.palladiosimulator.retriever.vulnerability.core.nvd;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

@Generated("jsonschema2pojo")
public class Config {

    @SerializedName("operator")
    @Expose
    private Config.Operator operator;
    @SerializedName("negate")
    @Expose
    private Boolean negate;
    /**
     * 
     * (Required)
     * 
     */
    @SerializedName("nodes")
    @Expose
    private List<Node> nodes;

    public Config.Operator getOperator() {
        return operator;
    }

    public void setOperator(Config.Operator operator) {
        this.operator = operator;
    }

    public Boolean getNegate() {
        return negate;
    }

    public void setNegate(Boolean negate) {
        this.negate = negate;
    }

    /**
     * 
     * (Required)
     * 
     */
    public List<Node> getNodes() {
        return nodes;
    }

    /**
     * 
     * (Required)
     * 
     */
    public void setNodes(List<Node> nodes) {
        this.nodes = nodes;
    }

    @Generated("jsonschema2pojo")
    public enum Operator {

        @SerializedName("AND")
        AND("AND"),
        @SerializedName("OR")
        OR("OR");
        private final String value;
        private final static Map<String, Config.Operator> CONSTANTS = new HashMap<String, Config.Operator>();

        static {
            for (Config.Operator c: values()) {
                CONSTANTS.put(c.value, c);
            }
        }

        Operator(String value) {
            this.value = value;
        }

        @Override
        public String toString() {
            return this.value;
        }

        public String value() {
            return this.value;
        }

        public static Config.Operator fromValue(String value) {
            Config.Operator constant = CONSTANTS.get(value);
            if (constant == null) {
                throw new IllegalArgumentException(value);
            } else {
                return constant;
            }
        }

    }

}
